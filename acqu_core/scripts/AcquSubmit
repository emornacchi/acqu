#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;

use Cwd qw(abs_path getcwd);
use File::Path qw(rmtree mkpath);
use File::Basename qw(basename);

my $filelist = '-';             # default STDIN
my $outputdir;                  # needs to be provided on cmd line
my $datadir = 'data';           # useful if you want to submit data from different beamtime - you provide a different name from the data directory
my $datafile = 'ROOTsetup.dat'; # useful if you want to submit different analysis - eg CaLib and Offline
my $clean = 0;
my $help = 0;
my $directio;
my $cwd = getcwd;
my $QSUB_BIN = 'qsub -q dflt';
#my $QSUB_BIN = 'qsub -q batch';
my $ACQUROOT_BIN = which('AcquRoot');
# parse options
Getopt::Long::Configure(qw(gnu_getopt));
GetOptions(
           'help|h' => \$help,
           'clean|c' => \$clean
          ) or print_help();


# parse arguments
if (@ARGV==1 || @ARGV==2 || @ARGV==3 || @ARGV==4) {
  $outputdir = $ARGV[0];
  if (@ARGV==2 || @ARGV==3 || @ARGV==4) {
    $filelist = $ARGV[1];
    if(@ARGV==3 || @ARGV==4) {
	$datadir = $ARGV[2];
	if(@ARGV==4) {
	    $datafile = $ARGV[3];
	}
    }
  }
} else {
  print_help();
}


&main;

sub main {
  # check some things before submission
  die "AcquRoot not found in PATH=$ENV{PATH}" unless defined $ACQUROOT_BIN;
  warn "Warning: Current working directory '$cwd' does not end with 'acqu_user'" unless $cwd =~ /acqu_user$/;

  # check for top-level config files
  my $ROOTsetup = $datadir . '/' . $datafile;
  my $haveROOTsetup = -f $ROOTsetup ? 1 : 0;
  my $ROOTsetupMC = $datadir . '/' . $datafile;
  my $haveROOTsetupMC = -f $ROOTsetupMC ? 1 : 0;

  printf("Your data directory is: $datadir \n");
  printf("Your top datafile is: $ROOTsetup \n \n");
  
  die "Error: Neither $ROOTsetup nor $ROOTsetupMC file found. Either you're in the wrong working directory".
    " or you need to create a symlink to AR.dat or AR-MC.dat (or similar top-entry config file for rundata or MC)".
    " below the data/ config folder. Arguments must be <outdir>,<filelist>,<datadir>,<datafile>"
    unless $haveROOTsetup or $haveROOTsetupMC;

  # data files might use DirectIO mode
  if ($haveROOTsetup) {
    open(my $cfg_fh, "<$ROOTsetup") or die "Can't open $ROOTsetup: $!";
    while (<$cfg_fh>) {
      next if /^#/;
      if (/^UseDirectIO:/) {
        $directio = 1;
        last;
      }
    }
    close $cfg_fh;
  }

  # read in the filelist, check for more errors
  open(my $inputfiles_fh, "<$filelist") or die "Can't open filelist $filelist: $!";
  my $n = 0;
  my @files;
  while (my $inputfile = <$inputfiles_fh>) {
    $n++;
    # remove leading and trailing whitespace
    $inputfile =~ s/^\s+//;
    $inputfile =~ s/\s+$//;
    unless(-f $inputfile) {
      warn "Warning: Inputfile $inputfile does not exist, skipping.";
      next;
    }
    unless($inputfile =~ /\.(dat|dat\.xz|root)$/) {
      warn "Warning: Inputfile $inputfile does not end with .dat[.xz] or .root, skipping.";
      next;
    }
    my $ismc = $inputfile =~ /\.root$/ ? 1 : 0;
    if ($ismc && !$haveROOTsetupMC) {
      die "Error: Cannot analyze MC .root file '$inputfile' without file '$ROOTsetupMC'.";
    }
    if (!$ismc && !$haveROOTsetup) {
      die "Error: Cannot analyze rundata file '$inputfile' without file '$ROOTsetup'.";
    }

    my $runnumber;
    if ($ismc) {
      # don't try to extract runnumbers for MC files...
      $runnumber = $n;
    } else {
      $runnumber = extract_runnumber($inputfile);
      unless(defined $runnumber) {
        warn "Cannot extract runnumber from $inputfile, using input linenumber $n instead";
        $runnumber = $n;
      }
    }
    $inputfile = abs_path($inputfile);
    push(@files, [$inputfile, $runnumber]);
  }
  close $inputfiles_fh;

  my $total = scalar @files;
  die "No files to be submitted, abort." if $total==0;

  # clean/create outputdir
  if ($clean) {
    print "Deleting outputdir $outputdir\n";
    rmtree([$outputdir]) or die "Error: Outputdir $outputdir was not deleted.";
  }
  die "Error: Output dir '$outputdir' already or still exists. Maybe use --clean?" if -e $outputdir;
  mkpath(["$outputdir/log", "$outputdir/root"]) == 3 # three folders should be created
    or die "Error: Cannot create log and root folders below outputdir $outputdir";


  # for jobs, make it absolute
  $outputdir = abs_path($outputdir);
  $ACQUROOT_BIN = abs_path($ACQUROOT_BIN);

  # finally submit the jobs
  my $submitted = 0;
  for my $f (@files) {
    submit_file($f->[0], $f->[1]);
    $submitted++;
    printf("%-40s\r",sprintf("%04d/%04d = %03.0f %% submitted",$submitted,$total,100*$submitted/$total));
  }
  printf("%-40s\n", "Submitted $submitted jobs.");
}

sub extract_runnumber {
  my $f = shift;
  if ($f =~ /_(\d+?)\.dat/) {
    return $1;
  }
  return undef;
}

sub which {
  my $cmd = shift;
  open(my $p, "which $cmd |") or die "Can't open which: $!";
  my @lines = <$p>;
  close $p;
  my $exit_value = $? >> 8;
  if ($exit_value != 0 || @lines != 1) {
    return undef;
  }
  chomp $lines[0];
  return $lines[0];
}

sub submit_file {
  my $inputfile = shift;
  my $runnumber = shift;

  my $ncpus = $inputfile =~ /\.(dat|root)$/ || ($directio && $inputfile =~ /\.xz$/) ? 1 : 2;
  my $rootfile = $inputfile =~ /\.root$/ ? "--rootfile" : ""; # AcquRoot is too stupid to detect this...

  my $filedat = $datadir . '/' . $datafile;

  my $basename = basename($inputfile);
  my $user = $ENV{USER};
  # open pipe to qsub
  open(my $qsub, "| $QSUB_BIN >/dev/null")
    or die "Can't open pipe to $QSUB_BIN: $!";
  print $qsub <<__BATCHSCRIPT;
#!/bin/bash
#PBS -N Acqu_$runnumber
## Send eMail if job aborts
#PBS -m a
## Send eMail when job begins
##PBS -m b
## Send eMail if job ends
##PBS -m e
#PBS -V
#PBS -l walltime=2:00:00
#PBS -j oe
#PBS -o $outputdir/log/$basename.log
#PBS -q batch
#PBS -l ncpus=$ncpus
echo INPUTFILE: $inputfile
cd $cwd
$ACQUROOT_BIN $filedat  --nolog --batch $rootfile \\
  --batchdir $outputdir/root/ \\
  --directory $outputdir/root/ \\
  --datafile $inputfile
__BATCHSCRIPT
  close $qsub or die "Cannot close pipe to qsub";
}

sub print_help {
  print <<__EOF;
Usage: AcquSubmit [--clean] <outputdir> [<filelist>|-] [<datadir>|data]

Submit jobs with qsub running AcquRoot on files in provided <filelist>
(or read it from STDIN), output goes to <outputdir> (will be created
and must not exist already). Needs to be run from "acqu_user"
directory with proper data/ symlink config folder, or you can provide a different
data directory ar third argument.

Options:

  --clean   Recursively delete <outputdir> before submission.
__EOF
  exit 255;
}
